---
import Icon from '../atoms/icon.astro';
---

<theme-toggle>
  <button class='button-theme'>
    <span class='button-theme__item light'>
      <Icon color='gray' icon='sun' size='40px' />
    </span>
    <span class='button-theme__item dark'>
      <Icon color='gray' icon='moon' size='40px' />
    </span>
  </button>
</theme-toggle>

<style>
  .button-theme {
    position: fixed;
    left: 0.5em;
    top: 45vh;
    display: flex;
    flex-flow: column;
    border: 0;
    border-radius: 999rem;
    background-color: #00000;
    padding: 0;
    box-shadow: inset 0 0 0 1px var(--theme-main-color);
    cursor: pointer;
  }

  .button-theme__item {
    z-index: 1;
    position: relative;
    display: flex;
    padding: 0.6rem;
    > svg {
      transition: all 0.2s linear;
      transform: scale(0.6);
    }
  }

  .button-theme[aria-pressed='false'] .button-theme__item.light {
    > svg {
      transition: all 0.2s linear;
      fill: #ffb700;
      transform: scale(1) rotate(200deg);
    }
  }

  .button-theme__item.light::before {
    content: '';
    z-index: -1;
    position: absolute;
    inset: 0;
    background-color: currentColor;
    border-radius: 999rem;
  }

  :global(.theme-dark)
    .button-theme[aria-pressed='true']
    .button-theme__item.dark {
    > svg {
      transition: all 0.3s linear;
      fill: #181832;
      transform: scale(1) rotate(360deg);
    }
  }
  :global(.theme-dark) .button-theme__item.light::before {
    transform: translateY(100%);
  }

  @media (prefers-reduced-motion: no-preference) {
    .button-theme__item,
    .button-theme__item.light::before {
      transition:
        transform 0.3s cubic-bezier(0.6, -0.28, 0.735, 0.045),
        color var(--theme-transition);
    }
  }

  @media (forced-colors: active) {
    .button-theme__item.light::before {
      background-color: SelectedItem;
    }
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
      const button = this.querySelector('button')!;

      /** Set the theme to dark/light mode. */
      const setTheme = (isDark: boolean) => {
        localStorage.setItem('theme', isDark ? 'dark' : 'light');

        document.documentElement.classList[isDark ? 'add' : 'remove'](
          'theme-dark'
        );
        button.setAttribute('aria-pressed', String(isDark));
      };

      // Toggle the theme when a user clicks the button.
      button.addEventListener('click', () => setTheme(!this.checkTheme()));

      // Initialize button state to reflect current theme.
      setTheme(this.checkTheme());
    }

    checkTheme() {
      let currentTheme = localStorage.getItem('theme');

      if (currentTheme === null) {
        localStorage.setItem('theme', 'light');
      }

      return currentTheme === 'dark';
    }
  }
  customElements.define('theme-toggle', ThemeToggle);
</script>
